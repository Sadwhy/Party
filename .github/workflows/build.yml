name: Build APK and Notify Discord

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: $( echo ${{ github.event.head_commit.id }} | cut -c1-7 )
      COMMIT: $( sed -E "s/(.*) <.*@.*>/\\1/g;t" <<< "${{ github.event.head_commit.message }}" | jq -Rsa . | tail -c +2 | head -c -2 )

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
        cache: gradle

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew assembleDebug

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
          name: Party
          path: "app/build/outputs/apk/debug/app-debug.apk"   

    - name: Upload APK to Telegram
      shell: bash
      env:
         BOT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
         CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
      run: |
        regex='s/[\_\*\[\]\(\)\~\`\>\#\+\-\=\|\{\}\.\!]/\\&/g'
        message=$(printf "*Nightly Release*\n${{ env.COMMIT }}" | sed -E "$regex")
        curl -F "chat_id=${{ env.CHANNEL_ID }}" \
        -F "document=@app/build/outputs/apk/debug/app-debug.apk" \
        -F "caption=${message}" \
        -F "parse_mode=MarkdownV2" \
        https://api.telegram.org/bot${{ env.BOT_ID }}/sendDocument

    - name: Delete Old Pre-Releases
      id: delete-pre-releases
      uses: sgpublic/delete-release-action@master
      with:
        pre-release-drop: true
        pre-release-keep-count: 3
        pre-release-drop-tag: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
